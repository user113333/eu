isqrt :: Int -> Int
isqrt n = round $ sqrt (fromIntegral n)

proper_divisors n = 1:fc ++ [ div n x | x <- fc ]
    where fc = [ x | x <- [2 .. isqrt n], mod n x == 0 ]

is_amicable n
    | friend == n = False
    | otherwise = sum_friend == n
    where friend = sum $ proper_divisors n
          sum_friend = (sum $ proper_divisors friend)

amicable_friend n = sum $ proper_divisors n
amicable_chain n c
    | n > 1000000 = []
    | f == last c = if length c == 1 then [] else c
    | elem f c = []
    | otherwise = amicable_chain f (f:c)
    where f = amicable_friend n
ac n = amicable_chain n [n]

max_snd (a0, a1) (b0, b1) = if a1 > b1 then (a0, a1) else (b0, b1)

-- find all chains
-- func = [ (i, l) | i <- [1..1000000], let c = ac i, let l = length c, l /= 0 ]

all_chains = [(220,2),(284,2),(1184,2),(1210,2),(2620,2),(2924,2),(5020,2),(5564,2),(6232,2),(6368,2),(10744,2),(10856,2),(12285,2),(12496,5),(14264,5),(14288,5),(14316,28),(14536,5),(14595,2),(15472,5),(17296,2),(17716,28),(18416,2),(19116,28),(19916,28),(22744,28),(22976,28),(31704,28),(45946,28),(47616,28),(48976,28),(63020,2),(66928,2),(66992,2),(67095,2),(69615,2),(71145,2),(76084,2),(79750,2),(83328,28),(87633,2),(88730,2),(97946,28),(100485,2),(122265,2),(122368,2),(122410,28),(123152,2),(124155,2),(139815,2),(141664,2),(142310,2),(152990,28),(153176,2),(168730,2),(171856,2),(176272,2),(176336,2),(177792,28),(180848,2),(185368,2),(196724,2),(202444,2),(203432,2),(243760,28),(274924,28),(275444,28),(280540,2),(285778,28),(294896,28),(295488,28),(308620,2),(319550,2),(356408,2),(358336,28),(365084,2),(366556,28),(376736,28),(381028,28),(389924,2),(399592,2),(418904,28),(430402,2),(437456,2),(455344,2),(469028,2),(486178,2),(503056,2),(514736,2),(522405,2),(525915,2),(589786,28),(600392,2),(609928,2),(624184,2),(629072,28),(635624,2),(643336,2),(652664,2),(667964,2),(669688,2),(686072,2),(691256,2),(712216,2),(726104,2),(783556,2),(796696,2),(802725,2),(863835,2),(879712,2),(898216,2),(901424,2),(980984,2)]
longest_chain = foldl max_snd (head all_chains) (tail all_chains) 
func = minimum $ ac (fst longest_chain)

main = do
    print func
